# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:27:28+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path, Query, Request

from models import ApiResponse, StatusGetResponse

app = MCPProxy(
    contact={'x-twitter': 'TheASF'},
    description='API for Qakka Queue System',
    license={
        'name': 'Apache 2.0',
        'url': 'http://www.apache.org/licenses/LICENSE-2.0.html',
    },
    title='Qakka',
    version='v1',
    servers=[{'url': 'https://apache.local'}],
)


@app.get('/queues', tags=['queue_management'])
def get_list_of_queues():
    """
    Get list of all Queues.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/queues', tags=['queue_management'])
def create_queue():
    """
    Create new queue.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete('/queues/{queueName}', tags=['queue_management'])
def delete_queue(
    queue_name: str = Path(..., alias='queueName'), confirm: Optional[bool] = False
):
    """
    Delete Queue.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/queues/{queueName}/config', tags=['queue_management'])
def get_queue_config(queue_name: str = Path(..., alias='queueName')):
    """
    Get Queue config.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put('/queues/{queueName}/config', tags=['queue_management'])
def update_queue_config(queue_name: str = Path(..., alias='queueName')):
    """
    Update Queue configuration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/queues/{queueName}/data/{queueMessageId}', tags=['message_processing'])
def get_message_data(
    queue_name: str = Path(..., alias='queueName'),
    queue_message_id: str = Path(..., alias='queueMessageId'),
):
    """
    Get data associated with a Queue Message.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/queues/{queueName}/messages', tags=['queue_management', 'message_processing']
)
def get_next_messages(
    queue_name: str = Path(..., alias='queueName'), count: Optional[str] = '1'
):
    """
    Get next Queue Messages from a Queue
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post('/queues/{queueName}/messages', tags=['message_processing'])
def send_message_binary(
    queue_name: str = Path(..., alias='queueName'),
    regions: Optional[str] = None,
    delay: Optional[str] = None,
    expiration: Optional[str] = None,
    content_type: str = Query(..., alias='contentType'),
    request: Request = ...,
):
    """
    Send Queue Message with a binary data (blob) payload.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/queues/{queueName}/messages/{queueMessageId}', tags=['message_processing']
)
def ack_message(
    queue_name: str = Path(..., alias='queueName'),
    queue_message_id: str = Path(..., alias='queueMessageId'),
):
    """
    Acknowledge that Queue Message has been processed.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/status', tags=['queue_management'])
def status():
    """
    Status of webapp.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
